// Generated by CoffeeScript 1.4.0
var Model, async, db;

async = require('async');

db = require('../system').db;

module.exports = Model = (function() {

  Model.db = db;

  Model.field = function(key, args) {
    var _ref;
    if (args == null) {
      args = {};
    }
    if ((_ref = this.fields) == null) {
      this.fields = {};
    }
    return this.fields[key] = args;
  };

  function Model(args) {
    var key, value;
    if (args == null) {
      args = {};
    }
    for (key in args) {
      value = args[key];
      this[key] = value;
    }
    this.id = this[this.constructor.table.key];
  }

  Model.prototype.hydrate = function(callback) {
    var field, key, _ref;
    _ref = this.constructor.table.columns;
    for (key in _ref) {
      field = _ref[key];
      if (this[key] != null) {
        continue;
      }
      if (/int\(\d+\)/.test(field.Type)) {
        this[key] = 0;
      } else {
        this[key] = '';
      }
    }
    return callback(null, this);
  };

  Model["new"] = function(callback) {
    var model;
    model = new this;
    return model.hydrate(callback);
  };

  Model.create = function(map, callback) {
    var field, hash, key, model, _ref,
      _this = this;
    model = new this(map);
    hash = {};
    _ref = this.fields;
    for (key in _ref) {
      field = _ref[key];
      hash[key] = model[key];
    }
    hash.created_at = 'NOW()';
    hash.updated_at = 'NOW()';
    return model.hydrate(function(error, model) {
      return _this.db.query("INSERT INTO " + _this.table.name + " SET ?", hash, function(error, result) {
        var id;
        id = result.insertId;
        model.id = id;
        model[_this.table.key] = id;
        return callback(error, model);
      });
    });
  };

  Model.all = function(callback) {
    var _this = this;
    return this.db.query("SELECT * FROM " + this.table.name, function(error, rows) {
      var model, models, row, _i, _len;
      if (error) {
        return callback(error);
      }
      models = [];
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        model = new _this(row);
        models.push(model);
      }
      return async.forEach(models, function(model, callback) {
        return model.hydrate(function() {
          return callback();
        });
      }, function(error) {
        return callback(null, models);
      });
    });
  };

  Model["delete"] = function(id, callback) {
    var _this = this;
    return this.db.query("DELETE FROM " + this.table.name + " WHERE " + this.table.key + " = ?", [id], function(error) {
      if (error) {
        return callback(error);
      }
      return callback(null);
    });
  };

  Model.get = function(id, callback) {
    var _this = this;
    return this.db.query("SELECT * FROM " + this.table.name + " WHERE " + this.table.key + " = ?", [id], function(error, rows) {
      var model;
      if (error) {
        return callback(error);
      }
      model = new _this(rows[0]);
      return model.hydrate(callback);
    });
  };

  return Model;

})();

Model.db = db;
